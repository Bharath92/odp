env:
  global:
   - CROSS_ARCH="arm64"
   - CONF=""

build:
  pre_ci:
   - docker build -t=odp/dev -f=Dockerfile2 .
  pre_ci_boot:
    image_name: odp/dev
    image_tag: latest
    pull: false
  ci:
   - update-alternatives --install /usr/bin/clang clang /usr/bin/clang-3.8 40
   - update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.8 40 --slave /usr/bin/g++ g++ /usr/bin/g++-4.8
   - if [ -n "$CROSS_ARCH" ] ;
     then
             BUILD_GNU_TYPE=`dpkg-architecture -a"$CROSS_ARCH" -qDEB_BUILD_GNU_TYPE` ;
             CROSS_GNU_TYPE=`dpkg-architecture -a"$CROSS_ARCH" -qDEB_HOST_GNU_TYPE` ;
             CROSS_MULTIARCH=`dpkg-architecture -a"$CROSS_ARCH" -qDEB_HOST_MULTIARCH` ;
             CROSS="--host="$CROSS_GNU_TYPE" --build="$BUILD_GNU_TYPE"" ;
             sudo dpkg --add-architecture "$CROSS_ARCH" ;
             sudo -E apt-add-repository -y "deb http://ports.ubuntu.com trusty main" ;
             sudo -E apt-add-repository -y "deb http://ports.ubuntu.com trusty-updates main" ;
             sudo -E apt-get -y update || true ;
             sudo -E apt-get -y --no-install-suggests --no-install-recommends --force-yes install build-essential ;
             if [ "$CROSS_ARCH" = "i386" ] ;
             then
                   sudo -E apt-get -y --no-install-suggests --no-install-recommends --force-yes install g++-multilib ;
             else
                   sudo -E apt-get -y --no-install-suggests --no-install-recommends --force-yes install g++-"$CROSS_GNU_TYPE" ;
             fi ;
             sudo -E apt-get -y --no-install-suggests --no-install-recommends --force-yes install libc6-dev:"$CROSS_ARCH" libssl-dev:"$CROSS_ARCH" zlib1g-dev:"$CROSS_ARCH" libconfig-dev:"$CROSS_ARCH" libstdc++-4.8-dev:"$CROSS_ARCH";
             export PKG_CONFIG_PATH=/usr/lib/${CROSS_MULTIARCH}/pkgconfig:/usr/${CROSS_MULTIARCH}/lib/pkgconfig ;
     fi
   - if [ "${CC#clang}" != "${CC}" ] ;
     then
           if [ -n "$CROSS_ARCH" ] ;
           then
                   export CC="${CC} --target=$CROSS_GNU_TYPE" ;
           fi ;
           export CXX="${CC/clang/clang++}";
     elif [ "$CROSS_ARCH" = "i386" ] ;
     then
           export CC="gcc -m32" ;
           export CXX="g++ -m32" ;
     elif [ -n "$CROSS_ARCH" ] ;
     then
           export CC="$CROSS_GNU_TYPE"-gcc ;
           export CXX="$CROSS_GNU_TYPE"-g++ ;
     fi
   - if test ! -L /usr/lib/ccache/${CC%% *} ; then sudo ln -s -t /usr/lib/ccache/ `which ${CC%% *}` ; fi
   - ccache -s
   # Install cunit for the validation tests because distro version is too old and fails C99 compile
   - sudo apt-get remove libcunit1-dev libcunit1
   - export LD_LIBRARY_PATH="$HOME/cunit-install/$CROSS_ARCH/lib:$LD_LIBRARY_PATH"
   - |
     if [ ! -f "$HOME/cunit-install/$CROSS_ARCH/lib/libcunit.a" ]; then
       export CUNIT_VERSION=2.1-3
       curl -sSOL https://github.com/Linaro/libcunit/releases/download/${CUNIT_VERSION}/CUnit-${CUNIT_VERSION}.tar.bz2
       tar -jxf *.bz2
       pushd CUnit*
       libtoolize --force --copy
       aclocal
       autoheader
       automake --add-missing --include-deps --copy
       autoconf
       ./configure --prefix=$HOME/cunit-install/$CROSS_ARCH --enable-debug --enable-automated --enable-basic --enable-console --enable-examples --enable-test $CROSS || cat config.log
       make
       sudo make install
       popd
     fi
   - export PKG_CONFIG_PATH="$HOME/cunit-install/$CROSS_ARCH/lib/pkgconfig:${PKG_CONFIG_PATH}"
   - find $HOME/cunit-install
   - echo 1000 | sudo tee /proc/sys/vm/nr_hugepages
   - sudo mkdir -p /mnt/huge
   - sudo mount -t hugetlbfs nodev /mnt/huge
   - gem install asciidoctor

#	DPDK pktio. Note that cache must be purged if dpdk version changes.
#	Netmap pktio
   - if [ -d "/opt/dpdk" ]; then
       echo "dpdk present";
       EXTRA_CONF="--with-dpdk-path=/opt/dpdk";
     fi
   - if [ -d "/opt/netmap" ]; then
       echo "netmap present";
       EXTRA_CONF="$EXTRA_CONF --with-dpdk-path=/opt/netmap";
     fi
   - ./bootstrap
   - ./configure --prefix=$HOME/odp-install --enable-user-guides --enable-debug=full --enable-helper-linux $CROSS $EXTRA_CONF $CONF || true
   - ./configure --prefix=$HOME/odp-install --enable-user-guides --enable-debug=full --enable-helper-linux $CROSS $CONF
   - make -j $(nproc)
   - make install
   - echo "Checking linking and run from install..."
   - echo "Dynamic link.."
   - gcc example/hello/odp_hello.c -o odp_hello_inst_dynamic `PKG_CONFIG_PATH=$HOME/odp-install/lib/pkgconfig:${PKG_CONFIG_PATH} pkg-config --cflags --libs libodp-linux`
   - echo "Static link.."
   - gcc example/hello/odp_hello.c -o odp_hello_inst_static `PKG_CONFIG_PATH=$HOME/odp-install/lib/pkgconfig:${PKG_CONFIG_PATH} pkg-config --cflags --libs libodp-linux --static` -static
